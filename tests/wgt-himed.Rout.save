
R version 4.0.3 Patched (2021-01-08 r79818) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> himed <- function(x) { n2 <- 1 + length(x) %/% 2; sort(x, partial = n2)[n2] }
> 
> ## Tolerance  2e-7 {13 * higher than default  1.49e-8 }
> is.all.equal <- function(x,y, tol = 2e-7) {
+     is.logical(r <- all.equal(x,y, tolerance = tol)) && r }
> 
> 
> library(robustbase)
> 
> stopifnot(is.na(wgt.himedian(numeric())))
> ## hi-median(<empty>)  seg.faulted or inf.looped till Jan.3, 2021
> 
> options(digits = 7)# single precision!
> set.seed(15)
> 
> cat("  n |   range(x)   | wgt.Himed\n",
+     "------------------------------\n",sep="")
  n |   range(x)   | wgt.Himed
------------------------------
> for(i in 1:100) {
+     n <- rpois(1, lam = 10)
+     cat(formatC(n,wid=3)," ")
+     x <- round(rnorm(n),3)
+     iw <- 1 + rpois(n, lam = 2)
+     him   <- himed(rep(x, iw)) ## == naive R solution
+     whim <- wgt.himedian (x, iw)
+     if(!is.all.equal(whim, him))
+         cat("whim != him:    ", whim, "!=", him,"\n")
+     cat(formatC(range(x), wid = 6, flag="-"), "",
+         formatC(whim,     wid = 6, flag="+"), "\n")
+ }
 10  -1.255 1.831   +0.488 
  9  -1.167 1.412   +0.032 
 18  -2.253 1.611   +0.471 
 10  -1.589 0.754   +0.004 
 11  0.2    1.575   +0.712 
 16  -2.587 1.552    -0.04 
  8  -1.499 1.055   +0.041 
 15  -1.069 1.966   +0.621 
 15  -1.829 1.193   -0.177 
 13  -2.088 1.33    +0.022 
 15  -1.905 2.1     +0.104 
 18  -1.827 1.43    -0.338 
 15  -1.494 1.409   +0.378 
  6  -1.266 1.263   -0.162 
 11  -1.243 1.458   +0.227 
  9  -1.609 1.146   +0.609 
  6  -0.898 1.625   -0.659 
 14  -1.379 1.898   -0.123 
  6  -1.928 0.656    -0.44 
  9  -1.286 2.61    +0.442 
  8  -1.196 1.169   -0.376 
  5  -1.871 0.875   +0.004 
 10  -1.618 1.87    -0.023 
 11  -0.979 1.337   +0.156 
  6  -0.357 1.723   +0.519 
  8  -2.566 2.334   -0.416 
 14  -1.909 2.04    -0.051 
 15  -2.229 2.505   +0.377 
  9  -0.409 1.553   +0.452 
  7  -0.924 1.009   -0.645 
 13  -2.14  0.711   -0.348 
  9  -1.697 1.601   +0.369 
 12  -2.227 1.793   +0.508 
 14  -2.308 1.808   +0.444 
 11  -1.85  3.437   +0.285 
  9  -1.312 0.601   +0.017 
  7  -1.792 0.005   -0.247 
 10  -2.178 1.51    -0.905 
 10  -1.121 1.464   -0.133 
  8  -0.246 1.299   +0.885 
 14  -1.666 2.306   +0.234 
  9  -0.752 2.056   +0.151 
 13  -0.472 1.625   -0.055 
  6  -1.795 0.449   +0.122 
 10  -2.023 2.992   +0.141 
  8  -1.265 1.476   +0.083 
 11  -1.715 0.966   +0.137 
  8  -1.943 0.374   -0.215 
  8  -2.377 1.483   +0.029 
  8  -0.659 2.699   +1.052 
  8  -0.671 1.426   +0.033 
 12  -1.462 2.075    -0.13 
 14  -1.865 1.406   -0.478 
  6  -0.324 2.014   +1.453 
 12  -1.519 1.072   -0.106 
 12  -1.511 1.232   +0.055 
 14  -0.516 1.865    +0.31 
  8  -2.402 0.218   -0.319 
 10  -2.724 0.983    -0.47 
  5  -1.566 1.034   +0.676 
  7  -1.98  1.7     -0.002 
 11  -2.203 1.736   -0.209 
  8  -1.782 0.435   +0.035 
 15  -0.835 1.668   +0.166 
 12  -1.938 0.838   -0.228 
  8  -1.257 1.542   -0.527 
 11  -2.394 2.062   -0.007 
 14  -2.574 2.356   +0.095 
 10  -1.691 1.387   -0.217 
 14  -0.601 2.453   +0.951 
  9  -0.631 0.953   +0.601 
  9  -1.501 1.146   -0.337 
  7  -1.826 1.32    +0.621 
  6  -0.859 0.343   +0.009 
  4  -1.038 1.396   +1.375 
  9  -1.325 0.892   +0.399 
 10  -0.632 1.347   +0.026 
  4  -0.926 0.666   -0.555 
 11  -1.67  2.158   -0.355 
 17  -0.818 1.842   +0.054 
  6  -1.296 1.066   +0.384 
 11  -1.494 1.224   -0.222 
 11  -2.397 2.254   +0.165 
 11  -1.76  2.115   +0.008 
  9  -0.542 1.41    +0.412 
  7  -1.078 1.596    -0.43 
  9  -1.161 1.527    -0.12 
  7  0.112  1.656   +0.929 
 13  -1.175 2.39    +0.627 
 11  -1.177 1.838   +0.359 
  8  -1.601 0.792   +0.313 
 12  -2.57  1.827   +0.019 
  5  -0.463 0.505    +0.49 
 11  -2.077 1.694   +0.032 
  7  -1.139 1.232   -0.141 
  9  -0.814 1.482   +0.331 
  5  -0.542 0.405   +0.244 
 13  -2.127 1.754   -0.424 
  7  -1.082 1.015     -0.1 
 11  -0.773 2.253   -0.011 
> 
> proc.time()
   user  system elapsed 
  0.163   0.034   0.188 
